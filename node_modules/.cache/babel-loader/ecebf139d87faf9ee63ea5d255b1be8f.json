{"ast":null,"code":"var _jsxFileName = \"/home/marcela/DesafioTecnico/js-test/src/data/Store.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { getGitUser } from '../services/api';\nimport DataContext from './DataContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Store = ({\n  children\n}) => {\n  _s();\n\n  const initialStateFilters = {\n    filterByName: {\n      name: ''\n    },\n    filterBylanguage: {\n      language: ''\n    }\n  };\n  const initialState = {\n    state: [],\n    original: []\n  };\n  const [data, setData] = useState(initialState);\n  const [filters, setFilters] = useState(initialStateFilters);\n  useEffect(() => {\n    async function funcGetUser() {\n      const user = await getGitUser();\n      setData({ ...data,\n        state: user,\n        original: user\n      });\n    }\n\n    funcGetUser();\n  }, []);\n  useEffect(() => {\n    setData(prev => ({ ...prev,\n      state: prev.original.filter(repo => repo.name.includes(filters.filterByName.name))\n    }));\n  }, [filters]);\n  useEffect(() => {\n    setData(prev => ({ ...prev,\n      state: prev.original.filter(repo => repo.language.includes(filters.filterBylanguage.language))\n    }));\n  }, [filters]);\n  const globalState = {\n    data,\n    filters,\n    setFilters\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: globalState,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Store, \"E+O7zUBLZqd05jsUIIP5ijlSGIo=\");\n\n_c = Store;\nexport default Store;\n\nvar _c;\n\n$RefreshReg$(_c, \"Store\");","map":{"version":3,"sources":["/home/marcela/DesafioTecnico/js-test/src/data/Store.js"],"names":["React","useEffect","useState","getGitUser","DataContext","Store","children","initialStateFilters","filterByName","name","filterBylanguage","language","initialState","state","original","data","setData","filters","setFilters","funcGetUser","user","prev","filter","repo","includes","globalState"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC9B,QAAMC,mBAAmB,GAAG;AAE1BC,IAAAA,YAAY,EAAE;AACZC,MAAAA,IAAI,EAAE;AADM,KAFY;AAK1BC,IAAAA,gBAAgB,EAAE;AAChBC,MAAAA,QAAQ,EAAE;AADM;AALQ,GAA5B;AAUA,QAAMC,YAAY,GAAG;AACnBC,IAAAA,KAAK,EAAE,EADY;AAEnBC,IAAAA,QAAQ,EAAE;AAFS,GAArB;AAKA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAACU,YAAD,CAAhC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAACK,mBAAD,CAAtC;AAGAN,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAekB,WAAf,GAA6B;AAC3B,YAAMC,IAAI,GAAG,MAAMjB,UAAU,EAA7B;AACAa,MAAAA,OAAO,CAAC,EACN,GAAGD,IADG;AAENF,QAAAA,KAAK,EAAEO,IAFD;AAGNN,QAAAA,QAAQ,EAAEM;AAHJ,OAAD,CAAP;AAKD;;AACDD,IAAAA,WAAW;AACZ,GAVQ,EAUN,EAVM,CAAT;AAYAlB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,OAAO,CAAEK,IAAD,KAAW,EACjB,GAAGA,IADc;AAEjBR,MAAAA,KAAK,EAAEQ,IAAI,CAACP,QAAL,CAAcQ,MAAd,CAAsBC,IAAD,IAAUA,IAAI,CAACd,IAAL,CACnCe,QADmC,CAC1BP,OAAO,CAACT,YAAR,CAAqBC,IADK,CAA/B;AAFU,KAAX,CAAD,CAAP;AAKD,GANQ,EAMN,CAACQ,OAAD,CANM,CAAT;AAQAhB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,OAAO,CAAEK,IAAD,KAAW,EACjB,GAAGA,IADc;AAEjBR,MAAAA,KAAK,EAAEQ,IAAI,CAACP,QAAL,CAAcQ,MAAd,CAAsBC,IAAD,IAAUA,IAAI,CAACZ,QAAL,CACrCa,QADqC,CAC5BP,OAAO,CAACP,gBAAR,CAAyBC,QADG,CAA/B;AAFU,KAAX,CAAD,CAAP;AAKD,GANQ,EAMN,CAACM,OAAD,CANM,CAAT;AAQA,QAAMQ,WAAW,GAAG;AAAEV,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,GAApB;AAEF,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAGO,WAA9B;AAAA,cACInB;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAKC,CAvDD;;GAAMD,K;;KAAAA,K;AAyDN,eAAeA,KAAf","sourcesContent":["import React, { useEffect , useState } from 'react';\nimport { getGitUser } from '../services/api';\nimport DataContext from './DataContext';\n\nconst Store = ({ children }) => {\n  const initialStateFilters = {\n\n    filterByName: {\n      name: '',\n    },\n    filterBylanguage: {\n      language: ''\n    },\n  };\n\n  const initialState = {\n    state: [],\n    original: [],\n  };\n\n  const [data, setData] = useState(initialState);\n  const [filters, setFilters] = useState(initialStateFilters);\n\n\n  useEffect(() => {\n    async function funcGetUser() {\n      const user = await getGitUser();\n      setData({\n        ...data,\n        state: user,\n        original: user,\n      });\n    }\n    funcGetUser();\n  }, []);\n\n  useEffect(() => {\n    setData((prev) => ({\n      ...prev,\n      state: prev.original.filter((repo) => repo.name\n        .includes(filters.filterByName.name)),\n    }));\n  }, [filters]);\n\n  useEffect(() => {\n    setData((prev) => ({\n      ...prev,\n      state: prev.original.filter((repo) => repo.language\n      .includes(filters.filterBylanguage.language)),\n    }));\n  }, [filters]);\n\n  const globalState = { data, filters, setFilters }\n\nreturn (\n  <DataContext.Provider value={ globalState }>\n    { children }\n  </DataContext.Provider>\n)\n}\n\nexport default Store;"]},"metadata":{},"sourceType":"module"}